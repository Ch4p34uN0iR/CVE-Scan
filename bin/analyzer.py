#!/usr/bin/env python3.3
# -*- coding: utf8 -*-
#
# Read input from NMap and use the information from cve-search to find
#  potential vulnerabilities in the recognized systems and their services

# Copyright (c) 2015	NorthernSec
# Copyright (c)	2015	Pieter-Jan Moreels
# This software is licensed under the Original BSD License

# Imports
import os
import sys
runpath=os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runpath, '..'))

from libnmap.parser import NmapParser

import argparse
import json

from lib.Config import Configuration
from lib.Toolkit import enhance, writeJson

description='''Read input from NMap and use the information from
               cve-search to find potential vulnerabilities in the
               recognized systems and their services'''

parser = argparse.ArgumentParser(description=description)
parser.add_argument('-j',  metavar='json',   type=str, help='Dump output to json file' )
parser.add_argument('-jN', metavar='json',   type=str, help='Read Json file in Nmap2CVE format' )
parser.add_argument('-xN', metavar='xml',    type=str, help='Read NMap XML file' )
parser.add_argument('out', metavar='output', type=str, help='Output file')
args = parser.parse_args()

def parseNMap(file=None, string=None):
  try:
    if file: report = NmapParser.parse_fromfile(file)
    if string: report = NmapParser.parse_fromstring(string)
  except:
    exit("Invalid Nmap xml!")
  # TO-DO: Add scan info: date, scan type... and change format to {scandate: x, scantype: y, systems: z}
  systems = []
  for h in report.hosts:
    system = {'mac':h.mac, 'ip':h.address, 'status':h.status, 'hostnames': h.hostnames,
              'vendor':h.vendor, 'distance':h.distance}
    cpeList = []
    for c in h.os_match_probabilities():
      for x in c.get_cpe():
        cpeList.append(x)
    cpeList=list(set(cpeList))
    if len(cpeList)>0:
      system['cpes']=cpeList
    services = []
    for s in h.services:
      service={'port':s.port, 'banner':s.banner, 'protocol':s.protocol, 'name':s.service,
               'state':s.state, 'reason':s.reason}
      if s.cpelist:
        service['cpe'] = s.cpelist[0].cpestring
      services.append(service)
    system['services']=services
    systems.append(system)
  return systems

if __name__ == '__main__':
  # intakes
  if not args.xN and not args.jN and not args.sN:
    sys.exit("No input selected!")
  if args.xN:
    syslist=parseNMap(file=args.xN)
  elif args.jN:
     try:
       syslist=json.loads(open(args.jN).read())
     except:
       sys.exit("Invalid JSon format!")
  #output
  if args.j:
    writeJson(args.j, syslist)

  #CVE-Scan magic
#  try:
  syslist=enhance(syslist)
  writeJson(args.out, syslist)
#  except Exception as e:
 #   print(e)
  #  sys.exit("Could not connect to the CVE-Search API on %s:%s"%(Configuration.getCVESearch()))
