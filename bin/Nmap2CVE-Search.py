#!/usr/bin/env python3.3
# -*- coding: utf8 -*-
#
# Read input from NMap and use the information from cve-search and 
# Toolswatch DPE (Default Password Enumeration) list to provide a list of
# possible ways a system might be misconfigured or vulnerable.

# Copyright (c) 2015	NorthernSec
# Copyright (c)	2015	Pieter-Jan Moreels
# This software is licensed under the Original BSD License

# Imports
import os
import sys
runpath=os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runpath, '..'))

from libnmap.parser import NmapParser
from libnmap.process import NmapProcess

import argparse
import json

from lib.Config import Configuration
from lib.WebDisplay import WebDisplay
from lib.TermDisplay import TermDisplay

description='''Read Nmap scans of services or systems and use the 
               cve-search core to get information about these cpes.'''

parser = argparse.ArgumentParser(description=description)
parser.add_argument('-j',  metavar='json', type=str, help='Dump output to json file' )
parser.add_argument('-s',  action='store_true',      help='Silent mode (no GUI)' )
parser.add_argument('-t',  action='store_true',      help='Use terminal GUI')
parser.add_argument('-jN', metavar='json', type=str, help='Read Json file in Nmap2CVE format' )
parser.add_argument('-sN', metavar='host', type=str, help='Host to run a full default NMap scan on' )
parser.add_argument('-xN', metavar='xml',  type=str, help='Read NMap XML file' )
args = parser.parse_args()

def parseNMap(file=None, string=None):
  try:
    if file: report = NmapParser.parse_fromfile(file)
    if string: report = NmapParser.parse_fromstring(string)
  except:
    exit("Invalid Nmap xml!")
  systems = []
  for h in report.hosts:
    system = {'mac':h.mac, 'ip':h.address, 'status':h.status, 'hostnames': h.hostnames,
              'vendor':h.vendor, 'distance':h.distance}
    cpeList = []
    for c in h.os_match_probabilities():
      for x in c.get_cpe():
        cpeList.append(x)
    cpeList=list(set(cpeList))
    if len(cpeList)>0:
      system['osDetect']=cpeList
    services = []
    for s in h.services:
      service={'port':s.port, 'banner':s.banner, 'protocol':s.protocol, 'name':s.service,
               'state':s.state, 'reason':s.reason}
      if s.cpelist:
        service['cpe'] = s.cpelist[0].cpestring
      services.append(service)
    system['services']=services
    systems.append(system)
  return systems

if __name__ == '__main__':
  # intakes
  if not args.xN and not args.jN and not args.sN:
    sys.exit("No input selected!")
  if args.xN:
    sys=parseNMap(file=args.xN)
  elif args.jN:
     try:
       sys=json.loads(open(args.jN).read())
     except:
       sys.exit("Invalid JSon format!")
  elif args.sN:
    nm=NmapProcess(targets=args.sN, options="-O -A")
    print("NMap scan started")
    nm.run()
    print(nm.summary)
    sys = parseNMap(string=nm.stdout)
  #output
  if args.j:
    if os.path.exists(args.j):
      os.remove(args.j)
    with open(args.j, 'w') as dump:
      json.dump(sys, dump)
  #server
  if not args.s and not args.t:
    WebDisplay.start(systems=sys)
  elif args.t:
    TermDisplay.start(systems=sys)
