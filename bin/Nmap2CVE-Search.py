#!/usr/bin/env python3.3
# -*- coding: utf8 -*-
#
# Read input from NMap and use the information from cve-search and 
# Toolswatch DPE (Default Password Enumeration) list to provide a list of
# possible ways a system might be misconfigured or vulnerable.

# Copyright (c) 2015	NorthernSec
# Copyright (c)	2015	Pieter-Jan Moreels
# This software is licensed under the Original BSD License

# Imports
import os
import sys
runpath=os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runpath, '..'))

from libnmap.parser import NmapParser
from libnmap.process import NmapProcess

import argparse
import json

from lib.Config import Configuration
from lib.WebDisplay import WebDisplay
from lib.TermDisplay import TermDisplay

from bin.converter import parseNMap
from bin.analyzer import enhance
from bin.visualizer import filtersFromArgs, displayTypeFromArgs, visualize

description='''Read Nmap scans of services or systems and use the 
               cve-search core to get information about these cpes.'''

parser = argparse.ArgumentParser(description=description)
parser.add_argument('-j',  metavar='json', type=str, help='Dump output to json file' )
parser.add_argument('-s',  action='store_true',      help='Silent mode (no GUI)' )
parser.add_argument('-t',  action='store_true',      help='Use terminal GUI')
parser.add_argument('-e',  action='store_true',      help='Show only CVEs with known exploitation scripts')
parser.add_argument('-fN', action='store_true',      help='Filter: Exploitable via network')
parser.add_argument('-fL', action='store_true',      help='Filter: Exploitable locally')
parser.add_argument('-fAN',action='store_true',      help='Filter: Exploitable via adjecent network')
parser.add_argument('-fC', action='store_true',      help='Filter: Impacts Confidentiality')
parser.add_argument('-fI', action='store_true',      help='Filter: Impacts Integrity')
parser.add_argument('-fA', action='store_true',      help='Filter: Impacts Availability')
parser.add_argument('-jN', metavar='json', type=str, help='Read Json file in Nmap2CVE format' )
parser.add_argument('-sN', metavar='host', type=str, help='Host to run a full default NMap scan on' )
parser.add_argument('-xN', metavar='xml',  type=str, help='Read NMap XML file' )
args = parser.parse_args()

if __name__ == '__main__':
  # intakes
  if not args.xN and not args.jN and not args.sN:
    sys.exit("No input selected!")
  if args.xN:
    syslist=parseNMap(file=args.xN)
  elif args.jN:
     try:
       syslist=json.loads(open(args.jN).read())
     except:
       sys.exit("Invalid JSon format!")
  elif args.sN:
    nm=NmapProcess(targets=args.sN, options="-O -A")
    print("NMap scan started")
    nm.run()
    print(nm.summary)
    syslist = parseNMap(string=nm.stdout)
  #output
  if args.j:
    if os.path.exists(args.j):
      os.remove(args.j)
    with open(args.j, 'w') as dump:
      json.dump(syslist, dump)

  #CVE-Scan magic
  try:
    syslist=enhance(syslist)
  except:
    sys.exit("Could not connect to the CVE-Search API on %s:%s"%(Configuration.getCVESearch()))
  filters=filtersFromArgs(args)
  display=displayTypeFromArgs(args)
  visualize(syslist, args.e, filters, display)
