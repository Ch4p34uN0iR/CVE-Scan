#!/usr/bin/env python3.3
# -*- coding: utf8 -*-
#
# Web component of CVE-Scan. Takes a list of scanned hosts as input and
# starts a web server to display this information in a graphical manner,
# enhancing it with information from the CVE-Search database and 
# ToolsWatch Default Password Enumeration (DPE) list.
#
# Copyright (c) 2015	NorthernSec
# Copyright (c)	2015	Pieter-Jan Moreels
# This software is licensed under the Original BSD License

# Imports

import os
import sys
runpath=os.path.dirname(os.path.realpath(__file__))

import re
from flask import Flask
from flask import render_template
from flask.ext.pymongo import PyMongo
import pymongo

from Toolkit import make_dict, toLocalTime
from Config import Configuration
sys.path.append(os.path.join(Configuration.getCVESearchPath(), './lib'))
import cves

class WebDisplay():
  @classmethod
  def start(self,port=None,systems=None):
    connect = Configuration.getMongoConnection()
    self.db = connect['cves']
    self.systems=systems
    app = Flask(__name__, static_folder='static', static_url_path='/static')
    app.config['MONGO_DBNAME'] = Configuration.getMongoDB()
    # functions
    def getEnhance():
      for system in self.systems:
        cpe=system['osDetect']
        if cpe:
          cpes=[]
          for c in cpe:
            vulns = list(self.db.find({'vulnerable_configuration': c},{'id':1, 'impact':1, 'access':1}))
            print(c)
            cpes.append({'cpe':c, 'cves':vulns})
          system['cpes']=cpes
          #get possible dpe info and store in dpe
        for service in system['services']:
          if 'cpe' in service:
            service['cves']=list(self.db.find({'vulnerable_configuration':service['cpe']},{'id':1, 'impact':1, 'access':1}))
          #get dpe info for service
      return systems

    # routes
    @app.route('/')
    def index():
      systems=getEnhance()
      return render_template('index.html', systems=systems)

    @app.route('/cve/<cveid>')
    def cve(cveid):
      cvesp = cves.last(rankinglookup = True, namelookup = True, vfeedlookup = True, capeclookup=True)
      cve = cvesp.getcve(cveid=cveid)
      if cve is None:
        return page_not_found(404)
      return render_template('cve.html', cve=cve)

    # error handeling
    @app.errorhandler(404)
    def page_not_found(e):
      return render_template('404.html'), 404

    # filters
    @app.template_filter('product')
    def product(banner):
      if banner:
        r=make_dict(banner)
        return r['product']
      else:
        return "unknown"
    @app.template_filter('toHuman')
    def toHuman(cpe):
      cpe = cpe[7:]
      result = cpe.split(':')[0] + " - "
      for c in cpe.split(':')[1:]:
        c = c.replace(':', ' ')
        c = c.replace('_', ' ')
        result += (" %s" %(c))
      result = result.title()
      return result

    @app.template_filter('currentTime')
    def currentTime(utc):
      output=toLocalTime(utc)
      return output 

    @app.template_filter('impact')
    def impact(string):
      if string.lower() == "none":       return "good"
      elif string.lower() == "partial":  return "medium"
      elif string.lower() == "complete": return "bad"

    # debug filter
    @app.template_filter('type')
    def isType(var):
      return type(var)

    #start webserver
    host = Configuration.getFlaskHost()
    port = Configuration.getFlaskPort()
    debug = Configuration.getFlaskDebug()
    app.run(host=host, port=port, debug=debug)


