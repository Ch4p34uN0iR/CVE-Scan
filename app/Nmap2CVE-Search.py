#!/usr/bin/env python3.3
# -*- coding: utf8 -*-
#
# Read input from NMap and use the information from cve-search and 
# Toolswatch DPE (Default Password Enumeration) list to provide a list of
# possible ways a system might be misconfigured or vulnerable.

# Copyright (c)	2015	Pieter-Jan Moreels

# Imports
import os
import sys
runpath=os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runpath, './lib/'))

import pymongo
from libnmap.parser import NmapParser

import argparse
from Config import Configuration
from WebDisplay import WebDisplay

description='''Read Nmap scans of services or systems and use the 
               cve-search core to get information about these cpes.'''

parser = argparse.ArgumentParser(description=description)
parser.add_argument('-p', metavar='Port',     type=int, help='MongoDB port' )
parser.add_argument('-u', metavar='Host',     type=str, help='MongoDB host' )
parser.add_argument('-d', metavar='Database', type=str, help='MongoDB database' )
parser.add_argument('-j', metavar='json',     type=str, help='Dump output to json file' )
parser.add_argument('-x', metavar='xml',      type=str, help='Read NMap XML file' )
args = parser.parse_args()

def parseNMap(file):
  report = NmapParser.parse_fromfile(file)
  systems = []
  for h in report.hosts:
    system = {'mac':h.mac, 'ip':h.address, 'status':h.status, 'cpe':h.os_fingerprint,
              'hostnames': h.hostnames, 'vendor':h.vendor, 'distance':h.distance}
    services = []
    for s in h.services:
      service={'port':s.port, 'banner':s.banner, 'protocol':s.protocol, 'name':s.service,
               'state':s.state, 'reason':s.reason}
      if s.cpelist:
        service['cpe'] = s.cpelist[0].cpestring
      services.append(service)
    system['services']=services
    systems.append(system)
  return systems

if __name__ == '__main__':
  f=args.x
  sys=parseNMap(f)
  WebDisplay.start(systems=sys)
