#!/usr/bin/env python3.3
# -*- coding: utf8 -*-
#
# Toolkit script for all types of functions, needed throughout the project
#
# Copyright (c) 2015	NorthernSec
# Copyright (c)	2015	Pieter-Jan Moreels
# This software is licensed under the Original BSD License

# Imports
import os
import re
from urllib.request import urlopen
import urllib
import json
from dateutil import tz
import dateutil.parser

from lib.Config import Configuration

# string to dict
def make_dict(s):
  # break into list of keys and values
  chunks = re.split('\s*(\w+\:)\s*',s)
  res={}
  # work backwards in value, key pairs
  args=[reversed(chunks)]*2
  for value,key in zip(*args):
    key=key.rstrip(':')
    if value:
      #add to current result-dict
      res[key]=value
    else:
      #start a higher-level result-dict
      res={key:res}
  return res

def writeJson(file, data):
  if os.path.exists(file):
    os.remove(file)
  with open(file, 'w') as dump:
    json.dump(data, dump, indent=2)

def toLocalTime(utc):
  timezone = tz.tzlocal()
  utc = dateutil.parser.parse(utc)
  output = utc.astimezone(timezone)
  output = output.strftime('%d-%m-%Y - %H:%M')
  return output


def toHuman(cpe):
  cpe = cpe[7:]
  result = cpe.split(':')[0] + " - "
  for c in cpe.split(':')[1:]:
    c = c.replace(':', ' ')
    c = c.replace('_', ' ')
    result += (" %s" %(c))
  result = result.title()
  return result

def filter(vulns, exploitsOnly=False, filters={}):
  if 'access' in filters and len(filters['access'])!=0:
    vulns=[x for x in vulns if x['access']['vector'] in filters['access']]
  if 'impact' in filters and len(filters['impact'])!=0:
    for fil in filters['impact']: vulns=[x for x in vulns if x['impact'][fil] !='NONE']
  # exploits only
  if exploitsOnly: vulns=[x for x in vulns if ('map_cve_exploitdb' in x or 'map_cve_msf' in x)]
  return vulns

def enhance(systems, exploitsOnly=False, filters={}):
  host,port=Configuration.getCVESearch()
  # deal with filters
  for system in systems:
    cpe=system['cpes'] if 'cpes' in system else None
    if cpe:
      cpes=[]
      for c in cpe:
        cEnc=urllib.parse.quote_plus(c).lower()
        data = (urlopen('http://%s:%s/api/cvefor/%s'%(host,port,cEnc)).read()).decode('utf8')
        vulns=json.loads(str(data))
        # apply filter
        vulns=filter(vulns, exploitsOnly, filters)
        # done
        cpes.append({'cpe':c, 'cves':vulns})
      system['cpes']=cpes
      #TODO get possible dpe info and store in dpe
    for service in system['services']:
      if 'cpe' in service:
        c=urllib.parse.quote_plus(service['cpe']).lower()
        data = (urlopen('http://%s:%s/api/cvefor/%s'%(host,port,c)).read()).decode('utf8')
        vulns=json.loads(str(data))
        # apply filter
        vulns=filter(vulns, exploitsOnly, filters)
        service['cves']=vulns

      #TODO get dpe info for service
  return systems

def splitByLength(string, size=50):
  return [string[i:i+size] for i in range(0,len(string),size)]
